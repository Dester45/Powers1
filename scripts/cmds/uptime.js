 const fs = require('fs');
const fetch = require('node-fetch');

module.exports = {
  config: {
    name: "uptime",
    aliases: ["uptime"],
    version: "1.1",
    author: "pharouk",
    role: 0,
    shortDescription: {
      en: "Displays bot uptime with an inspiring quote."
    },
    category: "box chat",
    guide: {
      en: "Use {p}uptime to display bot uptime along with an inspiring quote."
    }
  },
  onStart: async function ({ api, event, usersData, threadsData }) {
    try {
      const loadingMessage = "ùóüùó¢ùóîùóó üî¥üü£üîµ";
      await api.sendMessage(loadingMessage, event.threadID);

      // Obtention des utilisateurs et des fils de discussion
      const allUsers = await usersData.getAll();
      const allThreads = await threadsData.getAll();

      // Calcul de l'uptime en utilisant process.uptime()
      const uptimeInSeconds = process.uptime();
      const hours = Math.floor(uptimeInSeconds / 3600);
      const minutes = Math.floor((uptimeInSeconds % 3600) / 60);
      const seconds = Math.floor(uptimeInSeconds % 60);
      const uptimeString = `${hours} Hrs ${minutes} mins ${seconds} secs`;

      // Obtention de la date actuelle
      const currentDate = new Date();
      const day = currentDate.toLocaleDateString('en-US', { weekday: 'long' });
      const date = currentDate.toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' });
      const time = currentDate.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

      // URL de l'image √† inclure dans le message
      const imageLink = "https://i.ibb.co/nrypH8b/image.jpg";
      let fileName;

      // T√©l√©chargement de l'image
      try {
        const response = await fetch(imageLink);
        const buffer = await response.buffer();
        fileName = 'uptime_image.jpg';
        fs.writeFileSync(fileName, buffer);
      } catch (imageError) {
        console.error("Failed to download image:", imageError);
        fileName = null;
      }

      // Sources de citations
      const madaraQuotes = [
        { quote: "Votre attitude... me d√©go√ªte.", author: "Madara Uchiwa" },
        { quote: "Le plus grand mensonge de ce monde... C'est de pr√©tendre que tu es mort.", author: "Madara Uchiwa" }
      ];

      const painQuotes = [
        { quote: "La douleur est le meilleur professeur, mais personne ne veut aller dans sa classe.", author: "Pain" },
        { quote: "Lorsque les hommes sont confront√©s √† de v√©ritables d√©sespoirs, c'est l√† qu'ils trouvent leur vrai potentiel.", author: "Pain" }
      ];

      // Choix al√©atoire d'une source de citation
      const randomSource = Math.random() < 0.5 ? 'madara' : 'pain';
      const quotes = randomSource === 'madara' ? madaraQuotes : painQuotes;
      const { quote, author } = quotes[Math.floor(Math.random() * quotes.length)];

      // R√©actions al√©atoires
      const reactions = [
        "Tu es un shinobi incroyable !",
        "N'abandonne jamais, jeune ninja !",
        "Kakashi-sensei serait fier de toi !",
        "C'est le pouvoir de la volont√© du feu !",
        "Les vrais ninjas mangent des ramens !",
        "Byakugan activ√© !",
        "Rasengan ultime !",
        "Konoha te salue !",
        "Je suis un shinobi de Konoha, un ninja v√©n√©rable !"
      ];

      // Choix al√©atoire d'une r√©action
      const randomReaction = reactions[Math.floor(Math.random() * reactions.length)];

      // Construction du message final
      const messageBody = `üåê ùóïùó¢ùóß ùó¶ùóßùóîùóßùó®ùóß\n\n` +
                          `‚è±Ô∏è ùó®ùó£ùóßùóúùó†ùóò: ${uptimeString}\n` +
                          `üìÖ ùóóùóîùóßùóò: ${day}, ${date}\n` +
                          `üïí ùóõùó¢ùó®ùó•ùó¶: ${time}\n\n` +
                          `üë• ùó®ùó¶ùóòùó•ùó¶: ${allUsers.length}\n` +
                          `üí¨ ùóóùóúùó¶ùóñùó®ùó¶ùó¶ùóúùó¢ùó°: ${allThreads.length}\n\n` +
                          `üí° ùóñùóúùóßùóîùóßùóúùó¢ùó°: "${quote}" - ${author}\n\n` +
                          `üéâ ${randomReaction}`;

      // R√©cup√©ration des informations sur l'utilisateur ayant d√©clench√© la commande
      const senderID = event.senderID;
      const senderName = (await usersData.get(senderID)).name || "Utilisateur";

      // Construction du message avec mention de l'utilisateur
      const taggedMessage = {
        body: `Hey @${senderName}, ùó´-ùó™ùóúùó°ùóö ùó¶ùóßùóîùó•ùóôùóúùóöùóõùóòùó•v2 ùó¶ùóßùóîùóßùó¶:\n\n${messageBody}`,
        mentions: [{ tag: `@${senderName}`, id: senderID }]
      };

      // Ajout de l'image en pi√®ce jointe si t√©l√©charg√©e avec succ√®s
      if (fileName) {
        taggedMessage.attachment = fs.createReadStream(fileName);
      }

      // Envoi du message final
      api.sendMessage(taggedMessage, event.threadID);

    } catch (error) {
      console.error(error);
      api.sendMessage("Une erreur s'est produite lors de la r√©cup√©ration des statistiques d'uptime üí¢", event.threadID);
    }
  }
}
